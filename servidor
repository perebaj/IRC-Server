#!/usr/bin/env python3
import asyncio
from grader.tcp import Servidor
import re

_REMAINED_DATA_LIST_BUFFER = []
_NICKNAME_DICT = {}


def validar_nome(nome):
    return re.match(br"^[a-zA-Z][a-zA-Z0-9_-]*$", nome) is not None


def sair(conexao):
    print(conexao, "conexão fechada")
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b"":
        return sair(conexao)

    data_splited_list = dados.splitlines(True)
    print("data: ", dados)
    print("data_splited: ", data_splited_list)
    for data in data_splited_list:
        if b"PING" in data and b"\r\n" in data:
            print("PING esta em dados!")
            conexao.enviar(b":server PONG server :" + data.split(b" ", 1)[1])
        elif b"NICK" in data and b"\r\n" in data:
            print("NICK esta em dados!")
            next_nick = data.split(b" ", 1)[1].split(b"\r\n")[0]

            current_nick = b'*'
            for (key, value) in _NICKNAME_DICT.items():
                if value == conexao:
                    current_nick = key

            if validar_nome(next_nick):
                lowercase_nicks_list = []
                for key in _NICKNAME_DICT.keys():
                    lowercase_nicks_list.append(key.lower())

                if next_nick.lower() in lowercase_nicks_list:
                    print("nickname: %s já existe" % next_nick)
                    conexao.enviar(b":server 433 %s %s :Nickname is already in use\r\n" % (current_nick, next_nick))
                elif current_nick == b'*':
                    print("nickname: %s colocado no dicionario" % next_nick)
                    _NICKNAME_DICT[next_nick] = conexao
                    conexao.enviar(b":server 001 %s :Welcome\r\n" % next_nick)
                    conexao.enviar(b":server 422 %s :MOTD File is missing\r\n" % next_nick)
                else:
                    print("nickname: %s colocado no dicionario" % next_nick)
                    _NICKNAME_DICT[next_nick] = conexao
                    del _NICKNAME_DICT[current_nick]
                    conexao.enviar(b":%s NICK %s\r\n" % (current_nick, next_nick))
                    
            else:
                # :server 432 * %s :Erroneous nickname\r\n
                print(b":server 432 %s %s :Erroneous nickname" % (current_nick, next_nick))
                conexao.enviar(b":server 432 %s %s :Erroneous nickname\r\n" % (current_nick, next_nick))

        elif b"\r\n" not in data:
            print("elif")
            _REMAINED_DATA_LIST_BUFFER.append(data)

    buffer = b"".join(_REMAINED_DATA_LIST_BUFFER)
    print("variavel buffer: ", buffer)
    if b"PING" in buffer and b"\r\n" in buffer:
        print("BUFFER")
        conexao.enviar(b":server PONG server :" + buffer.split(b" ", 1)[1])
        _REMAINED_DATA_LIST_BUFFER.clear()
    # print(r'%s' %dados)
    # ic(r"{}".format(dados))
    # ic(r"{}".format(data_splited_list))
    # data_aux = b""
    # for data in data_splited_list:
    #     print("data: ", data)
    #     if b"\r\n" not in data:
    #         print(r"INFO>>| \r\n nao esta em data")
    #         _REMAINED_DATA_LIST_BUFFER.append(data_aux)
    #         data_aux = rb"".join(_REMAINED_DATA_LIST_BUFFER)
    #     elif b"\r\n" in data_aux:
    #         print(data_aux)
    #     else:
    #         print(r"INFO>>| \r\n esta em data")
    #         if len(_REMAINED_DATA_LIST_BUFFER) == 0:
    #             print(data)
    #         else:
    #             print(data_aux)

    #         _REMAINED_DATA_LIST_BUFFER.clear()

    # if b"PRIVMSG" in dados:
    #     receiver_bytes = dados.split(b" ")[1]
    #     content_bytes = dados.split(b":")[1]

    #     conexao.enviar(b":remetente PRIVMSG " + receiver_bytes + b" :" + content_bytes)
    # ic(receiver)
    # ic(content)

    # print(conexao, dados)


def conexao_aceita(conexao):
    print(conexao, "nova conexão")
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
